# #################################
# Basic training parameters for sound classification using the ESC50 dataset.
# This recipe uses a conv2d backbone for classification.
#
# Authors:
#  * Cem Subakan 2022, 2023
#  * Francesco Paissan 2022, 2023
#  (based on the SpeechBrain UrbanSound8k recipe)
# #################################

# Seed needs to be set at top of yaml, before objects with parameters are made
seed: 1234
__set_seed: !!python/object/apply:torch.manual_seed [!ref <seed>]

# Set up folders for reading from and writing to
# Dataset must already exist at `audio_data_folder`
data_folder: !PLACEHOLDER # e.g., /localscratch/UrbanSound8K
audio_data_folder: !ref <data_folder>/audio

wham_folder: !PLACEHOLDER
wham_audio_folder: !ref <wham_folder>/tr
wham_metadata: "metadata/wham_speechbrain.csv"

experiment_name: conv2dv2_classifier-16k
output_folder: !ref ./results/<experiment_name>/<seed>
save_folder: !ref <output_folder>/save
train_log: !ref <output_folder>/train_log.txt

test_only: False

# Tensorboard logs
use_tensorboard: False
tensorboard_logs_folder: !ref <output_folder>/tb_logs/

# Path where data manifest files will be stored
train_annotation: !ref <data_folder>/manifest/train.json
valid_annotation: !ref <data_folder>/manifest/valid.json
test_annotation: !ref <data_folder>/manifest/test.json

# To standardize results, UrbanSound8k has pre-separated samples into
# 10 folds for multi-fold validation
train_fold_nums: [1, 2, 3]
valid_fold_nums: [4]
test_fold_nums: [5]
skip_manifest_creation: False

ckpt_interval_minutes: 15 # save checkpoint every N min

# Training parameters
number_of_epochs: 400
batch_size: 32
lr: 0.00001
base_lr: 0.0001
step_size: 65000
sample_rate: 16000
signal_length_s: 5

wham_dataset: !new:wham_prepare.WHAMDataset
  data_dir: !ref <wham_audio_folder>
  target_length: !ref <signal_length_s>
  sample_rate: !ref <sample_rate>

device: "cuda"

# Feature parameters
n_mels: 80

# Number of classes
out_n_neurons: 50

shuffle: True
dataloader_options:
    batch_size: !ref <batch_size>
    shuffle: !ref <shuffle>
    num_workers: 0

use_pretrained: True
use_melspectra: False
embedding_model: !new:custom_models.ASTModel
    input_tdim: 431
    fstride: 30
    tstride: 30
    model_size: "tiny224"
    imagenet_pretrain: True
    label_dim: 50


classifier: !new:custom_models.ASTClassifier
    embed_dim: 192
    num_classes: !ref <out_n_neurons>

epoch_counter: !new:speechbrain.utils.epoch_loop.EpochCounter
    limit: !ref <number_of_epochs>

mean_var_norm: !new:speechbrain.processing.features.InputNormalization
    norm_type: sentence
    std_norm: False

# pre-processing
n_fft: 1024
spec_mag_power: 0.5
hop_length: 11.6099
win_length: 23.2199
compute_stft: !new:speechbrain.processing.features.STFT
    n_fft: !ref <n_fft>
    hop_length: !ref <hop_length>
    win_length: !ref <win_length>
    sample_rate: !ref <sample_rate>

compute_fbank: !new:speechbrain.processing.features.Filterbank
    n_mels: !ref <n_mels>
    n_fft: !ref <n_fft>
    sample_rate: !ref <sample_rate>

modules:
    compute_stft: !ref <compute_stft>
    compute_fbank: !ref <compute_fbank>
    # embedding_model: !ref <embedding_model>
    classifier: !ref <classifier>
    mean_var_norm: !ref <mean_var_norm>

compute_cost: !new:speechbrain.nnet.losses.LogSoftmaxWrapper
    loss_fn: !new:speechbrain.nnet.losses.AdditiveAngularMargin
        margin: 0.2
        scale: 30

opt_class: !name:torch.optim.Adam
    lr: !ref <lr>
    weight_decay: 0.000002

lr_annealing: !new:speechbrain.nnet.schedulers.StepScheduler
    initial_value: !ref <base_lr>
    decay_factor: 0.9
    decay_drop: 15

# Logging + checkpoints
train_logger: !new:speechbrain.utils.train_logger.FileTrainLogger
    save_file: !ref <train_log>

error_stats: !name:speechbrain.utils.metric_stats.MetricStats
    metric: !name:speechbrain.nnet.losses.classification_error
        reduction: batch

checkpointer: !new:speechbrain.utils.checkpoints.Checkpointer
    checkpoints_dir: !ref <save_folder>
    recoverables:
        embedding_model: !ref <embedding_model>
        classifier: !ref <classifier>
        normalizer: !ref <mean_var_norm>
        counter: !ref <epoch_counter>

add_noise_white: !new:speechbrain.processing.speech_augmentation.AddNoise

spec_aug: !new:speechbrain.lobes.augment.TimeDomainSpecAugment
    sample_rate: !ref <sample_rate>

drop_chunk: !new:speechbrain.processing.speech_augmentation.DropChunk

drop_freq: !new:speechbrain.processing.speech_augmentation.DropFreq

repeat_augment: 1 # @orion_step1: --repeat_augment 0
augment: !new:speechbrain.processing.augmentation.Augmenter
    parallel_augment: True
    concat_original: True
    parallel_augment_fixed_bs: True
    repeat_augment: !ref <repeat_augment>
    shuffle_augmentations: True
    min_augmentations: 3
    max_augmentations: 3
    augment_noise: !ref <add_noise_white>
      # spec_augment: !ref <spec_aug>
    drop_chunk: !ref <drop_chunk>
    drop_freq: !ref <drop_freq>


# If you do not want to use the pretrained separator you can simply delete pretrained_separator field.
# embedding_model_path: "speechbrain/PIQ-ESC50/embedding_model.ckpt"
embedding_model_path: "/home/franz/dev/speechbrain/cssl_sound/AST_tiny_newLR/2023-12-26+09-49-39_seed_2022+supclr_5s_train/save/task0/CKPT+2023-12-26+13-29-34+00/embedding_model.ckpt"
pretrained_encoder: !new:speechbrain.utils.parameter_transfer.Pretrainer
    collect_in: !ref <save_folder>
    loadables:
        embedding_model: !ref <embedding_model>
    paths:
        embedding_model: !ref <embedding_model_path>
